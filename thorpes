from memory_profiler import profile
import numpy as np #remove draws from the win-rate metric
import time #Is the feedback to the neural network appropriate?
import itertools
import random
import sys
np.set_printoptions(suppress=True)

from random import shuffle
#gameCount = 0
printMode = False
inverse = False
split = True
double = True
splitTrain = False
doubleTrain = False

overallWin = 0
overallWeights = []

previousWin = 0
previousWeights = []

bestResultsArray = []
bestWeightsArray = []

#enumerate isn't required, just loop for each item in the list

thorpesSimple = ["H", "H", "D", "D", "H", "S","S","S",
                 "S","S","H", "D","D", "D", "H", "S",
                 "S","S","S","S","H", "D", "D", "D",
                 "S", "S","S","S","S","S","H", "D","D",
                 "D", "S", "S","S","S","S","S","H",
                 "D", "D", "D", "S", "S","S","S","S","S",
                 "H","H", "D", "D", "H", "H","H","H","H",
                 "S","H", "H", "D", "D", "H", "H","H","H",
                 "H","S","H", "H", "D", "D", "H", "H","H",
                 "H","H","S","H", "H", "H", "D", "H", "H",
                 "H","H","H","S","H", "H", "H", "H", "H",
                 "H","H","H","H","S"]

thorpesAce =    ["H", "H", "H", "H", "H", "S", "S", "S",
                   "H", "H", "H", "H", "D", "Ds", "S", "S",
                   "H", "H", "D", "D", "D", "Ds", "S", "S",
                   "D", "D", "D", "D", "D", "Ds", "S", "S",
                   "D", "D", "D", "D", "D", "Ds", "S", "S",
                   "H", "H", "H", "H", "H", "S", "S", "S",
                   "H", "H", "H", "H", "H", "S", "S", "S",
                   "H", "H", "H", "H", "H", "H", "S", "S",
                   "H", "H", "H", "H", "H", "H", "S", "S",
                   "H", "H", "H", "H", "H", "H", "S", "S"]

thorpesPair =["P", "P", "H", "D", "P", "P", "P", "P",
              "S", "P", "P", "P", "H", "D", "P", "P",
              "P", "P", "S", "P","P", "P", "H", "D",
              "P", "P", "P", "P", "S", "P", "P", "P",
              "P", "D", "P", "P", "P", "P", "S", "P",
              "P", "P", "P", "D", "P", "P", "P","P",
              "S", "P", "P", "P", "H", "D", "H","P",
              "P", "S", "S", "P","H", "H", "H", "D",
              "H", "H", "P", "P", "S", "P", "H","H",
              "H", "D", "H", "H", "P", "P", "S","P",
              "H", "H", "H", "H", "H", "H", "P","S",
              "S", "P", "H", "H", "H", "H", "H","H",
              "P", "S", "S", "P"]

def rando(weights):
    for current in range(len(weights) - 1, -1, -1):
        for inNode in range(len(weights[current])):
            if len(weights[current][inNode]) <= 1:
                rand = random.uniform(0, 0.05)
                pos = random.choice([True, False])
                if pos == True:
                    weights[current][inNode][0] = weights[current][inNode][0] + (rand * weights[current][inNode][0])
                else:
                    weights[current][inNode][0] = weights[current][inNode][0] - (rand * weights[current][inNode][0])
            else:
                for outNode in range(len(weights[current][inNode])):
                    rand = random.uniform(0, 0.1)
                    pos = random.choice([True, False])
                    if pos ==True:
                        weights[current][inNode][outNode] = weights[current][inNode][outNode] + rand * weights[current][inNode][outNode]
                    else:
                        weights[current][inNode][outNode] = weights[current][inNode][outNode] - rand * weights[current][inNode][outNode]
    return weights



class NeuralNetwork: #Need to sort out where the class parameters should go

    def __init__(self, structure, startWeights): #rename hiddenNodeOutput etc #IS THE SELF. ACTUALLY REQUIRED?

        #network structure
        self.structure = structure #Each number represents the weights in each layer of the NN

        self.weights = []

        self.nodeOutputs = [] #Outputs from each node in each layer

        self.nodeInputs = []

        self.deltas = []

        if startWeights == 0:
            for i in range(len(self.structure)-1):
                self.weights.append(np.random.rand(self.structure[i], self.structure[i+1])) #Create and initialise weights
        else:
            self.weights = startWeights

    def sigmoid(self, z):

        return 1/(1+np.exp(-z))

    def propagate(self, testSet, nnType):

        self.nodeInputs = []

        self.nodeOutputs = []

        inputs = []
        if nnType ==0:
            for i in range(4,21):
                if i == testSet[0]:
                    inputs.append(1)
                else:
                    inputs.append(0)

            for i in range(2,12):
                if i == testSet[1]:
                    inputs.append(1)
                else:
                    inputs.append(0)
        elif nnType==1:
            for i in range(4,21,2):
                if i == testSet[0]:
                    inputs.append(1)
                else:
                    inputs.append(0)

            for i in range(2, 12):
                if i == testSet[1]:
                    inputs.append(1)
                else:
                    inputs.append(0)
        else:
            for i in range(9, 12):
                if i == testSet[0]:
                    inputs.append(1)
                else:
                    inputs.append(0)

            for i in range(2, 12):
                if i == testSet[1]:
                    inputs.append(1)
                else:
                    inputs.append(0)


        for i in range(len(self.structure)):

            if i == 0:

                self.nodeInputs.append(inputs)

                self.nodeOutputs.append(self.nodeInputs[-1])

            elif i < len(self.structure)-1:
                self.nodeInputs.append(np.dot(self.nodeOutputs[-1], self.weights[i-1]))
                self.nodeOutputs.append(self.sigmoid(self.nodeInputs[-1]))
            else:
                self.nodeInputs.append(np.dot(self.nodeOutputs[-1], self.weights[i-1]))

                self.nodeOutputs.append(self.sigmoid(self.nodeInputs[-1]))

        return(self.nodeOutputs[-1])

class Cards:

    suits = ['Spades', 'Hearts', 'Diamonds', 'Clubs']

    values = range(2, 15)

    shoe = []

    discardPile = []

    def __init__(self, decks):

        self.deckSize = decks


    def newShoe(self):
        self.shoe = []

        for i in range(self.deckSize):

            for Card in itertools.product(self.suits,self.values):

                self.shoe.append(Card) #Cartesian Product to Create Deck

        shuffle(self.shoe)



    def getCardName(self, cards): # takes in a list, do we need self here?
        output = []
        for card in cards:
            if card[1] <= 10:
                output.append((str(card[1]) + ' of ' + str(card[0]), card[1]))
            elif card[1] == 11:

                output.append(('Jack of' + ' ' + card[0], 10))

            elif card[1] == 12:

                output.append(('Queen of' + ' ' + card[0], 10))

            elif card[1] == 13:

                output.append(('King of' + ' ' + card[0], 10))

            elif card[1] == 14:

                output.append(('Ace of' + ' ' + card[0], 11))
        return output

    def deal(self, amount): #returns a list of cards
        dealCards = []
        if len(self.shoe) < 0.25 * (self.deckSize * 52):
            del self.shoe[:]
            self.newShoe()
        for i in range(amount):
            dealCards.append(self.shoe[0])
            del self.shoe[0]
        return dealCards

class Game:

    winCount = 0

    drawCount = 0

    loseCount = 0

    playerList = []

    counter = 0

    def __init__(self, numberOfPlayers,decks, hands, agent):
        self.agent = agent
        self.playerCount = numberOfPlayers
        self.cards = Cards(decks)
        self.handCount = hands
        self.setUp()


    def setUp(self):
        self.playerList = []
        player = Player("Dealer")
        self.playerList.append(player)
        for i in range(self.playerCount):
            player = Player("Player "+ str(i))
            self.playerList.append(player)
        self.hand()

    def split(self, player, pair):
        hands = [[pair[0], self.cards.deal(1)[0]], [pair[1], self.cards.deal(1)[0]]]
        for each in hands:
            if each[0][1]==each[1][1] and each[0][1] not in [4,5,10,11,12,13]:
                dCard = self.playerList[0].playerCards[0][4][1]
                if 9 < dCard and dCard < 14:
                    dCard = 10
                elif dCard == 14:
                    dCard = 11
                if each[0][1] == 14:
                    pCard = 11
                else:
                    pCard = each[0][1]

                decision = self.thorpes([[pCard,1,0], dCard])
                if decision == "P":
                    self.split(player, each)
                else:
                    player.playerCards.append(each)
            else:
                player.playerCards.append(each)

    def dealerAction(self):
        dealer = self.playerList[0]
        dealerCards = self.cards.getCardName(dealer.playerCards[0][4:])  # cards object required?
        if printMode:
            print("The dealer reveals his second card, it is the", dealerCards[1][0])  ##
            print("The dealer has a score of", dealer.playerCards[0][1], "\n")  ##

        player = self.playerList[1]
        for hand in player.playerCards:
            if hand[1] < 22:
                while (True):
                    if dealer.playerCards[0][1] < 17: #and dealer.playerCards[0][1] <= hand[1]:
                        dealer.playerCards = [self.twist(dealer, dealer.playerCards[0])]
                    else:
                        break

    def thorpes(self, inputs):
        if inputs[0][1]==1:
            splittable = "Splittable"
        else:
            splittable = "Unsplittable"
        if inputs[0][2]==1:
            ace = "soft"
        else:
            ace = "hard"

        if inputs[0][1]== 1:
            action = thorpesPair[(10 * (inputs[1] - 2)) + int((inputs[0][0]/2) - 2)]

        elif inputs[0][2]>0:
            action = thorpesAce[(8*(inputs[1]-2)) + (inputs[0][0]-13)]

        else:
            if inputs[0][0] > 17:
                inputs[0][0] = 17
            if inputs[0][0]<8:
                inputs[0][0]=8
            action = thorpesSimple[(10*(inputs[1]-2))+(inputs[0][0]-8)]

        #print(inputs[0][0], inputs[1], splittable, ace, action)

        return action


    def hand(self):
        for i in range(self.handCount):
            for player in self.playerList:
                player.playerCards = []

                cards = self.cards.deal(2)  # deal cards to players -> [("diamonds", 10), ("diamonds", 9)]
                if player.playerID!="Dealer" and splitTrain:
                    cards = [cards[0], cards[0]]

                dealtCards = self.cards.getCardName(cards)

                player.playerCards.append(cards)
                if player.playerID != "Dealer":
                    if printMode:
                        print(player.playerID + "'s cards are the", dealtCards[0][0], "and the", dealtCards[1][0],
                              ": Score =", dealtCards[0][1] + dealtCards[1][1])  ##

                else:
                    if printMode:
                        print("\n\n\nThe " + player.playerID + "'s shown card is the", dealtCards[0][0], ": Score =",
                              self.cards.getCardName(player.playerCards[0])[0][1])  ##

                if split and player.playerID != "Dealer":
                    if cards[0][1]== cards[1][1] and cards[0][1] not in [4, 5, 10, 11, 12, 13]:
                        dCard = self.playerList[0].playerCards[0][4][1]
                        if 9 < dCard and dCard < 14:
                            dCard = 10
                        elif dCard == 14:
                            dCard = 11
                        if cards[0][1] == 14:
                            pCard = 12
                        else:
                            pCard = 2 * cards[0][1]

                        decision = self.thorpes([[pCard,1,0], dCard])
                        if decision == "P":
                            if printMode:
                                print(decision, "Player has decided to split")
                            self.split(player, cards)
                            del player.playerCards[0]
                        else:
                            if printMode:
                                print(decision, "Player has decided not to split")

                for hand in player.playerCards:
                    aces = 0

                    if hand[0][1] == 14:
                        aces += 1

                    if hand[1][1] == 14:
                        aces += 1

                    hand.insert(0, aces) #insert into position 0 - ace count
                    hand.insert(1, 0) #insert into position 1 - 0(current score count)
                    hand.insert(2,0) #insert into position 2 - 0 (No double down at this point)
                    hand.insert(3, 0)
                    if len(hand[4:]) > 1 or hand[4][1] == hand[5][1]: #Was splitting possible?
                        hand[3] == 1


                    dealtCards = self.cards.getCardName(
                        hand[4:])  # could save this as a separate variable in player class ###########

                    if hand[0] != 2:
                        hand[1] = dealtCards[0][1] + dealtCards[1][1]
                    else:
                        hand[1] = 12
                        hand[0] -= 1

                    if double == True and player.playerID != "Dealer" and 8 < hand[1] < 12:
                        dCard = self.playerList[0].playerCards[0][4][1]
                        if 9 < dCard and dCard < 14:
                            dCard = 10
                        elif dCard == 14:
                            dCard = 11

                        decision = self.thorpes([[hand[4][1] + hand[5][1], 0, hand[0]], dCard])

                        if decision =="D" or decision =="Ds":
                            hand[2] = 1
                        else:
                            hand[2] = 3  # to signify that there was the option to double up

            for player in self.playerList[1:]: #Need to make sure the logic for aces is correct here
                for hand in player.playerCards:
                    if self.agent == "nn":
                        while hand[1] < 21 and hand[2]!=2:
                            values = []
                            aceCount = hand[0]
                            for card in hand[4:]:
                                if 9 < card[1] and card[1]<14: #9 < card[1] <14?
                                    values.append(10)
                                elif card[1]==14:
                                    if aceCount >0:
                                        values.append(11)
                                        aceCount -=1
                                    else:
                                        values.append(1)
                                else:
                                    values.append(card[1])

                            dCard = self.playerList[0].playerCards[0][4][1]
                            if 9 < dCard and dCard < 14:
                                dCard = 10
                            elif dCard == 14:
                                dCard = 11

                            total = 0


                            for i in values: #inefficient
                                total +=i

                            decision = self.thorpes([[total, 0, hand[0]], dCard])

                            if decision =="H" or decision =="D":
                                hand = self.twist(player, hand)
                                #print("after twist", hand[4:])
                                if hand[2]==1:
                                    hand[2] = 2
                            else:
                                if printMode:
                                    print("Player has decided to stand")
                                break

                    elif self.agent == "dealer":
                        for player in self.playerList[1:]:
                            while hand[1] < 21:
                                if hand[1] > 16:
                                    break
                                else:
                                    hand = self.twist(player, hand)

                    elif self.agent == "hoyle":
                        dealerCard = self.cards.getCardName(self.playerList[0].playerCards[4:])  # HOYLES
                        for player in self.playerList[1:]:
                            while hand[1] < 21:
                                if hand[0] > 0:
                                    if hand[1] > 17:
                                        break
                                elif dealerCard[0][1] < 7:
                                    if hand[1] > 12:
                                        break
                                else:
                                    if hand[1] > 16:
                                        break
                                hand = self.twist(player, hand)


                    elif self.agent == "random":
                        for player in self.playerList[1:]:
                            while hand[1] < 21:
                                rand = random.uniform(0, 1)
                                if rand >= 0.5:
                                    hand = self.twist(player, hand)
                                else:
                                    break

                #################################################################################

                self.dealerAction()
                for hand in player.playerCards:
                    best = (
                    self.playerList[0].playerID, self.playerList[0].playerCards[0][1])  # Code under here could be more efficient


                    if hand[1] == 21 and self.playerList[0].playerCards[0][1]==21:
                        if len(hand[4:]) == 2:
                            if len(self.playerList[0].playerCards[0][4:])==2:
                                pass
                            else:
                                best = (player.playerID, hand[1])
                        elif len(self.playerList[0].playerCards[0][4:])==2:
                            best = (self.playerList[0].playerID, self.playerList[0].playerCards[0][1])

                    if hand[1] > self.playerList[0].playerCards[0][1] and hand[1] < 22:
                        best = (player.playerID, hand[1])

                    if self.playerList[0].playerCards[0][1]>21 and hand[1]<22:
                        best = (player.playerID, hand[1])

                    if best[0] == self.playerList[0].playerID and best[1] == hand[1]:
                        if printMode:
                            print("The game was a draw")  ##
                        #print("draw", "\n\n")
                        self.drawCount += 1
                    else:
                        if printMode:
                            print(best[0], "wins with a score of", best[1])  ##
                        if best[0] == self.playerList[1].playerID:
                            #print("win", "\n\n")
                            if double and hand[2] > 0:
                                if hand[2]==2:
                                    self.winCount += 2
                                else:
                                    self.winCount += 1
                            else:
                                self.winCount +=1
                        else:
                            #print("lose", "\n\n")
                            if double and hand[2] > 0:
                                if hand[2] == 2:
                                    self.loseCount += 2
                                else:
                                    self.loseCount += 1
                            else:
                                self.loseCount +=1

    def twist(self, player, hand):
        if printMode:
            print(player.playerID, "has decided to twist... \n")##
        card = self.cards.deal(1)[0]

        if card[1] == 14:
            hand[0]+=1
        hand.append(card)
        dealtCards = self.cards.getCardName(hand[4:])
        total = hand[1] + dealtCards[-1][1]
        if total > 21 and hand[0] > 0:
            total-=10
            hand[0]-=1
        hand[1] = total

        if printMode:
            print("The", dealtCards[-1][0], "was dealt")

        return hand

class Player:

    def __init__(self, ID):

        self.playerID = (ID)

        self.playerCards = []

if __name__ == '__main__':
    start_time = time.time()
    game = Game(1, 6, 1000000, "nn")
    print("Run 1", (game.winCount * 100 / (game.winCount + game.drawCount + game.loseCount)))



    #print("--- %s seconds ---" % (time.time() - start_time))
