import numpy as np #remove draws from the win-rate metric
import time #Is the feedback to the neural network appropriate?
import itertools
import random
import re
from random import shuffle

printMode = False
inverse = False
split = False
double = False

overallWin = 0
overallWeights = []

previousWin = 0
previousWeights = []

def noBrac(arra):
    output = re.sub('[a-z()]', '', arra)
    output=str(output)
    return output

#enumerate isn't required, just loop for each item in the list

def rando(weights):
    for current in range(len(weights) - 1, -1, -1):
        for inNode in range(len(weights[current])):
            if len(weights[current][inNode]) <= 1:
                rand = random.uniform(0, 0.05)
                pos = random.choice([True, False])
                if pos == True:
                    weights[current][inNode][0] = weights[current][inNode][0] + (rand * weights[current][inNode][0])
                else:
                    weights[current][inNode][0] = weights[current][inNode][0] - (rand * weights[current][inNode][0])
            else:
                for outNode in range(len(weights[current][inNode])):
                    rand = random.uniform(0, 0.1)
                    pos = random.choice([True, False])
                    if pos ==True:
                        weights[current][inNode][outNode] = weights[current][inNode][outNode] + rand * weights[current][inNode][outNode]
                    else:
                        weights[current][inNode][outNode] = weights[current][inNode][outNode] - rand * weights[current][inNode][outNode]
    return weights



class NeuralNetwork: #Need to sort out where the class parameters should go

    def __init__(self, structure, startWeights): #rename hiddenNodeOutput etc #IS THE SELF. ACTUALLY REQUIRED?

        #network structure
        self.structure = structure #Each number represents the weights in each layer of the NN

        self.weights = []

        self.nodeOutputs = [] #Outputs from each node in each layer

        self.nodeInputs = []

        self.deltas = []

        if startWeights == 0:
            for i in range(len(self.structure)-1):
                self.weights.append(np.random.rand(self.structure[i], self.structure[i+1])) #Create and initialise weights
        else:
            self.weights = startWeights

    def sigmoid(self, z):

        return 1/(1+np.exp(-z))

    def propagate(self, testSet):

        self.nodeInputs = []

        self.nodeOutputs = []

        inputs = []

        for i in range(4,21):
            if i == testSet[0]:
                inputs.append(1)
            else:
                inputs.append(0)

        for i in range(2,12):
            if i == testSet[1]:
                inputs.append(1)
            else:
                inputs.append(0)

        #print("inputs====", inputs)

        for i in range(len(self.structure)):

            if i == 0:

                self.nodeInputs.append(inputs)

                self.nodeOutputs.append(self.nodeInputs[-1])

            elif i < len(self.structure)-1:
                self.nodeInputs.append(np.dot(self.nodeOutputs[-1], self.weights[i-1]))
                self.nodeOutputs.append(self.sigmoid(self.nodeInputs[-1]))
            else:
                self.nodeInputs.append(np.dot(self.nodeOutputs[-1], self.weights[i-1]))

                self.nodeOutputs.append(self.sigmoid(self.nodeInputs[-1]))

        return(self.nodeOutputs[-1])

    def BP(self,expected):

        self.deltas = []

        lastLayer = []

        for current in range(len(self.weights) - 1, -1, -1):

            if current == len(self.weights) - 1:

                for inNode in range(len(self.weights[-1])):

                    if len(self.weights[-1][inNode]) <= 1:

                        lastLayer.append([(self.nodeOutputs[-1][0] - expected[0]) * (

                        self.nodeOutputs[-1][0] * (1 - self.nodeOutputs[-1][0])) * self.nodeOutputs[-2][inNode]])

                    else:

                        for outNode in range(len(self.weights[-1][inNode])):

                            lastLayer.append([(self.nodeOutputs[-1][outNode] - expected[outNode]) * (

                            self.nodeOutputs[-1][outNode] * (1 - self.nodeOutputs[-1][outNode])) * self.nodeOutputs[-2][

                                                  inNode]])

                self.deltas.append(lastLayer)

                layerDeltas = []

            elif current == len(self.weights) - 2:

                layer = current

                for inNode in range(len(self.weights[layer])):

                    weightedSum = 0

                    nodeDeltas = []

                    for outNode in range(len(self.weights[layer][inNode])):

                        for k in range(len(self.nodeOutputs) - 1, layer + 1, -1):

                            for l in range(len(self.nodeOutputs[k])):

                                weightedSum += self.weights[k - 1][outNode][l] * (

                                self.nodeOutputs[k][l] - expected[l]) * (

                                               self.nodeOutputs[k][l] * (1 - self.nodeOutputs[k][l]))

                        nodeDeltas.append(weightedSum * (

                        (self.nodeOutputs[layer + 1][outNode] * (1 - self.nodeOutputs[layer + 1][outNode])) *

                        self.nodeOutputs[layer][inNode]))

                    layerDeltas.append(nodeDeltas)

                self.deltas.append(layerDeltas)

            else:

                node2Error = []

                intermediate = []


                for node0 in range(len(self.nodeOutputs[0])):

                    layerDeltas = []

                    for node1 in range(len(self.nodeOutputs[1])):

                        n1WeightedSum = 0

                        for node2 in range(len(self.nodeOutputs[2])):

                            weightedSum = 0

                            for node3 in range(len(self.nodeOutputs[3])):

                                weightedSum += (self.nodeOutputs[-1][node3] - expected[node3]) * (

                                self.nodeOutputs[-1][node3] * (1 - (self.nodeOutputs[-1][node3])) *

                                self.weights[-1][node2][node3])

                            node2Error.append(weightedSum)

                        for weights in range(len(self.weights[-2][node1])):

                            n1WeightedSum += self.weights[-2][node1][weights] * node2Error[weights] * (

                            self.nodeOutputs[2][weights] * (1 - self.nodeOutputs[2][weights]))

                        layerDeltas.append(

                            n1WeightedSum * (self.nodeOutputs[1][node1]) * (1 - self.nodeOutputs[1][node1]) *

                            self.nodeOutputs[0][node0])

                    intermediate.append(layerDeltas)

                self.deltas.append(intermediate)

        for layer in range(len(self.weights)):  # weights

            for node in range(len(self.weights[layer])):

                for weight in range(len(self.weights[layer][node])):

                    self.weights[layer][node][weight] = self.weights[layer][node][weight] - (self.deltas[-(layer + 1)][node][weight])


class Cards:

    suits = ['Spades', 'Hearts', 'Diamonds', 'Clubs']

    values = range(2, 15)

    shoe = []

    discardPile = []

    def __init__(self, decks):

        self.deckSize = decks

        self.newShoe()


    def newShoe(self):

        for i in range(self.deckSize):

            for Card in itertools.product(self.suits,self.values):

                self.shoe.append(Card) #Cartesian Product to Create Deck

        shuffle(self.shoe)



    def getCardName(self, cards): # takes in a list, do we need self here?
        output = []
        for card in cards:
            if card[1] <= 10:
                output.append((str(card[1]) + ' of ' + str(card[0]), card[1]))
            elif card[1] == 11:

                output.append(('Jack of' + ' ' + card[0], 10))

            elif card[1] == 12:

                output.append(('Queen of' + ' ' + card[0], 10))

            elif card[1] == 13:

                output.append(('King of' + ' ' + card[0], 10))

            elif card[1] == 14:

                output.append(('Ace of' + ' ' + card[0], 11))
        return output

    def deal(self, amount): #returns a list of cards
        dealCards = []
        if len(self.shoe) < 0.25 * (self.deckSize * 52):
            del self.shoe[:]
            self.newShoe()
        for i in range(amount):
            dealCards.append(self.shoe[0])
            del self.shoe[0]
        return dealCards

class Game:

    winCount = 0

    drawCount = 0

    loseCount = 0

    playerList = []

    counter = 0

    def __init__(self, numberOfPlayers,decks, hands, agent):
        self.agent = agent
        self.playerCount = numberOfPlayers
        self.cards = Cards(decks)
        self.handCount = hands
        self.setUp()

    def setUp(self):
        self.playerList = []
        player = Player("Dealer")
        self.playerList.append(player)
        for i in range(self.playerCount):
            player = Player("Player "+ str(i))
            self.playerList.append(player)
        self.hand()


    def split(self, player, pair):
        hands = [[pair[0], self.cards.deal(1)[0]], [pair[1], self.cards.deal(1)[0]]]
        for each in hands:
            if each[0][1]==each[1][1] and each[0][1] not in [4,5,10]:
                decision = splitNN.propagate([each[0][1], self.playerList[0].playerCards[0][3][1]])
                if decision >= 0.5:
                    self.split(player, each)
                else:
                    player.playerCards.append(each)
            else:
                player.playerCards.append(each)

    def dealerAction(self):
        dealer = self.playerList[0]
        dealerCards = self.cards.getCardName(dealer.playerCards[0][3:])  # cards object required?
        if printMode == True:
            print("The dealer reveals his second card, it is the", dealerCards[1][0])  ##
            print("The dealer has a score of", dealer.playerCards[0][1], "\n")  ##

        player = self.playerList[1]
        for hand in player.playerCards:
            if hand[1] < 22:
                while (True):
                    if dealer.playerCards[0][1] < 17 and dealer.playerCards[0][1] <= hand[1]:
                        dealer.playerCards = [self.twist(dealer, dealer.playerCards[0])]
                    else:
                        break

    def hand(self):
        for i in range(self.handCount):
            for player in self.playerList:
                player.playerCards = []

                cards = self.cards.deal(2)  # deal cards to players -> [("diamonds", 10), ("diamonds", 9)]

                dealtCards = self.cards.getCardName(cards)

                player.playerCards.append(cards)
                if player.playerID != "Dealer":
                    if printMode == True:
                        print(player.playerID + "'s cards are the", dealtCards[0][0], "and the", dealtCards[1][0],
                              ": Score =", dealtCards[0][1] + dealtCards[1][1])  ##

                else:
                    if printMode == True:
                        print("\n\n\nThe " + player.playerID + "'s shown card is the", dealtCards[0][0], ": Score =",
                              self.cards.getCardName(player.playerCards[0])[0][1])  ##

                if split and player.playerID != "Dealer":
                    print("SPLLLLLLLLLLLLIT BRAHHH")
                    if cards[0][1] == cards[1][1] and cards[0][1] not in [4, 5, 10]:
                        #decision = input(player.playerID + " your cards are " + str(cards[0]) +" and " + str(cards[1]) + ". Would you like to Split? Y = Yes, N= No ")
                        decision = splitNN.propagate([cards[0][1], self.playerList[0].playerCards[0][3][1]])
                        if decision >= 0.5:
                            print(decision, "Player has decided to split")
                            self.split(player, cards)
                            del player.playerCards[0]
                        else:
                            print(decision, "Player has decided not to split")


                for hand in player.playerCards:
                    aces = 0

                    if hand[0][1] == 14:
                        aces += 1

                    if hand[1][1] == 14:
                        aces += 1

                    hand.insert(0, aces) #insert into position 0 - ace count
                    hand.insert(1, 0) #insert into position 1 - 0(current score count)
                    hand.insert(2,0) #insert into position 2 - 0 (No double down at this point)


                    dealtCards = self.cards.getCardName(
                        hand[3:])  # could save this as a separate variable in player class ###########

                    if hand[0] != 2:
                        hand[1] = dealtCards[0][1] + dealtCards[1][1]
                    else:
                        hand[1] = 12
                        hand[0] -= 1

                    if double == True and player.playerID != "Dealer" and hand[1]<12:
                        print("D D D D D D D D D D DOOOOOOOUBLE BRO")
                        print("Double hand?", hand)
                        decision = doubleNN.propagate([hand[3][1], hand[4][1], self.playerList[0].playerCards[0][3][1]])
                        if decision >=0.5:
                            print("Player has decided to double down")
                            hand[2] = 1
                        else:
                            print("Player has decided not to double down")

            for player in self.playerList[1:]: #Need to make sure the logic for aces is correct here
                for hand in player.playerCards:
                    if self.agent == "nn":
                        while hand[1] < 21 and hand[2]<2:
                            values = []
                            aceCount = hand[0]
                            for card in hand[3:]:
                                if 9 < card[1] and card[1]<14: #9 < card[1] <14?
                                    values.append(10)
                                elif card[1]==14:
                                    if aceCount >0:
                                        values.append(11)
                                        aceCount -=1
                                    else:
                                        values.append(1)
                                else:
                                    values.append(card[1])

                            dCard = self.playerList[0].playerCards[0][3][1]
                            if 9 < dCard and dCard < 14:
                                dCard = 10
                            elif dCard == 14:
                                dCard = 11

                            total = 0

                            #print(total, dCard)

                            for i in values:
                                total +=i
                            decision = drawFold.propagate([total, dCard])  # feeds the input through the network

                            if inverse == True:
                                if decision >= 0.5:
                                    hand = self.twist(player, hand)
                                else:
                                    break
                            else:
                                if decision <= 0.5:
                                    hand = self.twist(player, hand)
                                    if hand[2]==1:
                                        hand[2] = 2
                                else:
                                    #print("Player has decided to stand")
                                    break


                    elif self.agent == "dealer":
                        for player in self.playerList[1:]:
                            while hand[1] < 21:
                                if hand[1] > 16:
                                    break
                                else:
                                    hand = self.twist(player, hand)

                    elif self.agent == "hoyle":
                        dealerCard = self.cards.getCardName(self.playerList[0].playerCards[3:])  # HOYLES
                        for player in self.playerList[1:]:
                            while hand[1] < 21:
                                if hand[0] > 0:
                                    if hand[1] > 17:
                                        break
                                elif dealerCard[0][1] < 7:
                                    if hand[1] > 12:
                                        break
                                else:
                                    if hand[1] > 16:
                                        break
                                hand = self.twist(player, hand)


                    elif self.agent == "random":
                        for player in self.playerList[1:]:
                            while hand[1] < 21:
                                rand = random.uniform(0, 1)
                                if rand >= 0.5:
                                    hand = self.twist(player, hand)
                                else:
                                    break

                #################################################################################

                self.dealerAction()
                for hand in player.playerCards:
                    #print("score:", hand[1])
                    best = (
                    self.playerList[0].playerID, self.playerList[0].playerCards[0][1])  # Code under here could be more efficient


                    if hand[1] == 21 and self.playerList[0].playerCards[0][1]==21:
                        if len(hand[3:]) == 2:
                            if len(self.playerList[0].playerCards[0][3:])==2:
                                pass
                            else:
                                best = (player.playerID, hand[1])
                        elif len(self.playerList[0].playerCards[0][3:])==2:
                            best = (self.playerList[0].playerID, self.playerList[0].playerCards[0][1])



                    if hand[1] > self.playerList[0].playerCards[0][1] and hand[1] < 22:
                        best = (player.playerID, hand[1])

                    if self.playerList[0].playerCards[0][1]>21 and hand[1]<22:
                        best = (player.playerID, hand[1])


                    if best[0] == self.playerList[0].playerID and best[1] == hand[1]:
                        if printMode == True:
                            print("The game was a draw")  ##
                        self.drawCount += 1

                        if self.agent == "nn":
                            if double and hand[2] == 2:
                                doubleNN.BP([0.5])
                            elif split and len(player.playerCards)>1:
                                splitNN.BP([0.5])
                            elif not double and not split:
                                if hand[1] < 21:
                                    drawFold.BP([0.5])
                                elif hand[1] == 21 and len(hand[3:]) > 2:
                                    if inverse == True:
                                        drawFold.BP([1])
                                    else:
                                        drawFold.BP([0])
                        break
                    else:
                        if printMode == True:
                            print(best[0], "wins with a score of", best[1])  ##
                        if best[0] == self.playerList[1].playerID:
                            if double and hand[2] == 2:
                                doubleNN.BP([1])
                                self.winCount += 2
                            else:
                                self.winCount += 1
                            if self.agent == "nn":
                                if split == True and len(player.playerCards)>1:
                                    splitNN.BP([1])
                                elif not double and not split: ###################################
                                    if best[1] < 21:
                                        if inverse == True:
                                            drawFold.BP([0])
                                        else:
                                            drawFold.BP([1])

                                    elif best[1] == 21 and len(hand[3:]) > 2:
                                        if inverse == True:
                                            drawFold.BP([1])
                                        else:
                                            drawFold.BP([0])
                        else:
                            if double and hand[2] == 2:
                                doubleNN.BP([0])
                                self.loseCount += 2
                            else:
                                self.loseCount += 1

                            if self.agent == "nn":
                                if split == True and len(player.playerCards)>1:
                                    splitNN.BP([0])
                                elif not double and not split:
                                    if hand[1] < 21:
                                        if inverse == True:
                                            drawFold.BP([1])
                                        else:
                                            drawFold.BP([0])
                                    elif hand[1] > 21:
                                        if inverse == True:
                                            drawFold.BP([0])
                                        else:
                                            drawFold.BP([1])

    def twist(self, player, hand):
        if printMode == True:
            print(player.playerID, "has decided to twist... \n")##
        card = self.cards.deal(1)[0]
        if card[1] == 14:
            hand[0]+=1
        hand.append(card)
        dealtCards = self.cards.getCardName(hand[3:])
        total = hand[1] + dealtCards[-1][1]
        if total > 21 and hand[0] > 0:
            total-=10
            hand[0]-=1
        hand[1] = total

        if printMode == True:
            print("The", dealtCards[-1][0], "was dealt")

        if not split and not double:
            if total <21:
                drawFold.BP([0])
        return hand

class Player:

    def __init__(self, ID):

        self.playerID = (ID)

        self.playerCards = []

if __name__ == '__main__':
    start_time = time.time()
    hands = 20000
    generations = 50
    strategy = "nn"

    if strategy =="nn":

        population = 40
        fullDetails = []
        results = []

        for i in range(generations):
            currentWin = 0
            currentWeights = []
            for n in range(population):#population
                drawFold= NeuralNetwork((27,2,1), 0)
                if i>0 and n>0:
                    drawFold.weights = rando(overallWeights)
                game = Game(1,6,hands, strategy)
                if game.winCount > currentWin:
                    currentWin = game.winCount
                    currentWeights = drawFold.weights
            previousWin = currentWin
            previousWeights = currentWeights
            if previousWin > overallWin:
                overallWin = previousWin
                overallWeights = previousWeights
            print("best win rate =", (previousWin * 100) / hands, "%")
            print("20k g: 50 pop:40 27-2-1. BEST WEIGHTS", previousWeights)

        print("best result = ", (overallWin * 100) / hands, "\n best weights =", overallWeights)

    print("--- %s seconds ---" % (time.time() - start_time))
